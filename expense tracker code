import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Main {

    private static List<Expense> expenses = new ArrayList<>();
    private static final String FILE_PATH = "expenses.txt";
    private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    // Expense categories
    private static final String[] categories = {"Food", "Transportation", "Entertainment", "Bills", "Miscellaneous"};

    public static void main(String[] args) {
        loadExpenses(); // Load existing expenses from file

        Scanner scanner = new Scanner(System.in);

        while (true) {
            displayMenu();
            System.out.print("Enter your choice (1/2/3/4/5/6): ");
            String choice = scanner.nextLine();

            switch (choice) {
                case "1":
                    addExpense(scanner);
                    break;
                case "2":
                    editExpense(scanner);
                    break;
                case "3":
                    deleteExpense(scanner);
                    break;
                case "4":
                    displayMonthlySummary();
                    break;
                case "5":
                    displayCategorySummary();
                    break;
                case "6":
                    saveExpenses(); // Save expenses to file before exiting
                    System.out.println("Exiting Expense Tracker. Goodbye!");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice. Please enter 1, 2, 3, 4, 5, or 6.");
            }
        }
    }

    private static void addExpense(Scanner scanner) {
        System.out.println("\nAdding Expense:");
        System.out.print("Enter a brief description: ");
        String description = scanner.nextLine();

        double amount;
        while (true) {
            try {
                System.out.print("Enter the amount spent ($): ");
                amount = Double.parseDouble(scanner.nextLine());
                if (amount <= 0) {
                    throw new IllegalArgumentException("Amount must be greater than zero.");
                }
                break;
            } catch (NumberFormatException e) {
                System.out.println("Invalid input format. Please enter a valid number.");
            } catch (IllegalArgumentException e) {
                System.out.println("Invalid input. Please enter a valid value.");
            }
        }

        int categoryIndex;
        while (true) {
            try {
                System.out.println("Select a category:");
                for (int i = 0; i < categories.length; i++) {
                    System.out.println((i + 1) + ". " + categories[i]);
                }
                System.out.print("Enter category number: ");
                categoryIndex = Integer.parseInt(scanner.nextLine());
                if (categoryIndex < 1 || categoryIndex > categories.length) {
                    throw new IllegalArgumentException("Invalid category number.");
                }
                break;
            } catch (NumberFormatException e) {
                System.out.println("Invalid category number. Please enter a valid number.");
            } catch (IllegalArgumentException e) {
                System.out.println("Invalid category number. Please enter a valid number.");
            }
        }

        LocalDateTime timestamp = LocalDateTime.now();
        Expense expense = new Expense(timestamp, description, amount, categories[categoryIndex - 1]);
        expenses.add(expense);
        System.out.println("Expense added successfully.");
    }

    private static void editExpense(Scanner scanner) {
        System.out.println("\nEditing Expense:");
        displayExpenses();

        int index;
        while (true) {
            try {
                System.out.print("Enter the index of the expense to edit: ");
                index = Integer.parseInt(scanner.nextLine());
                if (index < 1 || index > expenses.size()) {
                    throw new IllegalArgumentException("Invalid expense index.");
                }
                break;
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a valid number.");
            } catch (IllegalArgumentException e) {
                System.out.println("Invalid input. Please enter a valid number.");
            }
        }

        Expense expense = expenses.get(index - 1);
        System.out.println("Editing expense #" + index + ":");
        System.out.println("Description: " + expense.getDescription());
        System.out.println("Amount: $" + expense.getAmount());
        System.out.println("Category: " + expense.getCategory());

        System.out.print("Enter new description (leave blank to keep current): ");
        String newDescription = scanner.nextLine();
        if (!newDescription.isEmpty()) {
            expense.setDescription(newDescription);
        }

        double newAmount;
        while (true) {
            try {
                System.out.print("Enter new amount ($), current: $" + expense.getAmount() + ": ");
                newAmount = Double.parseDouble(scanner.nextLine());
                if (newAmount <= 0) {
                    throw new IllegalArgumentException("Amount must be greater than zero.");
                }
                expense.setAmount(newAmount);
                break;
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a valid number.");
            } catch (IllegalArgumentException e) {
                System.out.println("Invalid input. Please enter a valid number.");
            }
        }

        int newCategoryIndex;
        while (true) {
            try {
                System.out.println("Select a new category:");
                for (int i = 0; i < categories.length; i++) {
                    System.out.println((i + 1) + ". " + categories[i]);
                }
                System.out.print("Enter category number: ");
                newCategoryIndex = Integer.parseInt(scanner.nextLine());
                if (newCategoryIndex < 1 || newCategoryIndex > categories.length) {
                    throw new IllegalArgumentException("Invalid category number.");
                }
                expense.setCategory(categories[newCategoryIndex - 1]);
                break;
            } catch (NumberFormatException e) {
                System.out.println("Invalid category number. Please enter a valid number.");
            } catch (IllegalArgumentException e) {
                System.out.println("Invalid category number. Please enter a valid number.");
            }
        }

        expense.setTimestamp(LocalDateTime.now());
        System.out.println("Expense edited successfully.");
    }

    private static void deleteExpense(Scanner scanner) {
        System.out.println("\nDeleting Expense:");
        displayExpenses();

        int index;
        while (true) {
            try {
                System.out.print("Enter the index of the expense to delete: ");
                index = Integer.parseInt(scanner.nextLine());
                if (index < 1 || index > expenses.size()) {
                    throw new IllegalArgumentException("Invalid expense index.");
                }
                break;
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a valid number.");
            } catch (IllegalArgumentException e) {
                System.out.println("Invalid input. Please enter a valid number.");
            }
        }

        Expense expense = expenses.remove(index - 1);
        System.out.println("Expense #" + index + " deleted successfully:");
        System.out.println("Description: " + expense.getDescription());
        System.out.println("Amount: $" + expense.getAmount());
        System.out.println("Category: " + expense.getCategory());
    }

    private static void displayMonthlySummary() {
        LocalDateTime now = LocalDateTime.now();
        int currentMonth = now.getMonthValue();
        int currentYear = now.getYear();

        double totalExpense = 0;
        for (Expense expense : expenses) {
            if (expense.getTimestamp().getMonthValue() == currentMonth && expense.getTimestamp().getYear() == currentYear) {
                totalExpense += expense.getAmount();
            }
        }

        System.out.println("\n----- Monthly Summary: " + now.getMonth() + " " + currentYear + " -----");
        System.out.printf("Total expenses: $%.2f%n", totalExpense);
    }

    private static void displayCategorySummary() {
        System.out.println("\nCategory-wise Summary:");
        double[] categoryTotals = new double[categories.length];

        for (Expense expense : expenses) {
            for (int i = 0; i < categories.length; i++) {
                if (expense.getCategory().equals(categories[i])) {
                    categoryTotals[i] += expense.getAmount();
                    break;
                }
            }
        }

        for (int i = 0; i < categories.length; i++) {
            System.out.printf("%s: $%.2f%n", categories[i], categoryTotals[i]);
        }
    }

    private static void displayExpenses() {
        if (expenses.isEmpty()) {
            System.out.println("No expenses to display.");
            return;
        }

        System.out.println("\nCurrent Expenses:");
        for (int i = 0; i < expenses.size(); i++) {
            Expense expense = expenses.get(i);
            System.out.printf("%d. %s - $%.2f - %s%n", i + 1, expense.getDescription(), expense.getAmount(), expense.getCategory());
        }
    }

    private static void displayMenu() {
        System.out.println("\nExpense Tracker Menu:");
        System.out.println("1. Add Expense");
        System.out.println("2. Edit Expense");
        System.out.println("3. Delete Expense");
        System.out.println("4. View Monthly Summary");
        System.out.println("5. View Category-wise Summary");
        System.out.println("6. Exit");
    }

    private static void saveExpenses() {
        try (PrintWriter writer = new PrintWriter(new FileWriter(FILE_PATH))) {
            for (Expense expense : expenses) {
                writer.println(expense.getTimestamp().format(formatter));
                writer.println(expense.getDescription());
                writer.println(expense.getAmount());
                writer.println(expense.getCategory());
            }
            System.out.println("Expense data saved successfully.");
        } catch (IOException e) {
            System.out.println("Error saving expenses to file: " + e.getMessage());
        }
    }

    private static void loadExpenses() {
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_PATH))) {
            String line;
            while ((line = reader.readLine()) != null) {
                LocalDateTime timestamp = LocalDateTime.parse(line, formatter);
                String description = reader.readLine();
                double amount = Double.parseDouble(reader.readLine());
                String category = reader.readLine();

                Expense expense = new Expense(timestamp, description, amount, category);
                expenses.add(expense);
            }
            System.out.println("Expense data loaded successfully.");
        } catch (IOException | NumberFormatException e) {
            System.out.println("No existing expense data found. Starting with an empty expense list.");
        }
    }

    private static class Expense {

        private LocalDateTime timestamp;
        private String description;
        private double amount;
        private String category;

        public Expense(LocalDateTime timestamp, String description, double amount, String category) {
            this.timestamp = timestamp;
            this.description = description;
            this.amount = amount;
            this.category = category;
        }

        public LocalDateTime getTimestamp() {
            return timestamp;
        }

        public void setTimestamp(LocalDateTime timestamp) {
            this.timestamp = timestamp;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(String description) {
            this.description = description;
        }

        public double getAmount() {
            return amount;
        }

        public void setAmount(double amount) {
            this.amount = amount;
        }

        public String getCategory() {
            return category;
        }

        public void setCategory(String category) {
            this.category = category;
        }
    }
}
